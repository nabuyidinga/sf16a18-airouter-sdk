Index: compat-wireless-2016-01-10/net/mac80211/offchannel.c
===================================================================
--- compat-wireless-2016-01-10.orig/net/mac80211/offchannel.c	2016-01-15 20:00:10.000000000 +0800
+++ compat-wireless-2016-01-10/net/mac80211/offchannel.c	2018-03-19 14:50:50.466868211 +0800
@@ -772,6 +772,53 @@
 	return ieee80211_cancel_roc(local, cookie, false);
 }
 
+/* austin: add this func to printk the info about auth/deauth,
+ * assoc/reassoc/disassoc. */
+static void ieee80211_tx_mgmt_info(struct ieee80211_sub_if_data *sdata,
+		const u8 *buf)
+{
+	struct ieee80211_mgmt *mgmt = (void *)buf;
+	u16 fc;
+	fc = le16_to_cpu(mgmt->frame_control);
+
+	switch (fc & IEEE80211_FCTL_STYPE) {
+	case IEEE80211_STYPE_AUTH:
+		sdata_dbg(sdata, "transmit a AUTH frame to %pM\n", mgmt->da);
+		break;
+	case IEEE80211_STYPE_DEAUTH:
+		sdata_info(sdata,
+				"transmit a DEAUTH frame to %pM, Reason: %u\n",
+				mgmt->da,
+				le16_to_cpu(mgmt->u.deauth.reason_code));
+		break;
+	case IEEE80211_STYPE_DISASSOC:
+		sdata_info(sdata, "transmit a DISASSOC frame to %pM, Reason: "
+				  "%u\n",
+				mgmt->da,
+				le16_to_cpu(mgmt->u.deauth.reason_code));
+		break;
+	case IEEE80211_STYPE_ASSOC_RESP:
+		sdata_dbg(sdata, "transmit a ASSOC_RESP frame to %pM\n",
+				mgmt->da);
+		break;
+	case IEEE80211_STYPE_REASSOC_RESP:
+		sdata_dbg(sdata, "transmit a REASSOC_RESP frame to %pM\n",
+				mgmt->da);
+		break;
+	case IEEE80211_STYPE_ASSOC_REQ:
+		sdata_dbg(sdata, "transmit a ASSOC_REQ frame to %pM\n",
+				mgmt->da);
+		break;
+	case IEEE80211_STYPE_REASSOC_REQ:
+		sdata_dbg(sdata, "transmit a REASSOC_REQ frame to %pM\n",
+				mgmt->da);
+		break;
+	default:
+		break;
+	}
+	return;
+}
+
 int ieee80211_mgmt_tx(struct wiphy *wiphy, struct wireless_dev *wdev,
 		      struct cfg80211_mgmt_tx_params *params, u64 *cookie)
 {
@@ -934,6 +981,7 @@
 		*cookie = 0xffffffff;
 	}
 
+	ieee80211_tx_mgmt_info(sdata, skb->data);
 	if (!need_offchan) {
 		ieee80211_tx_skb(sdata, skb);
 		ret = 0;

Index: compat-wireless-2016-01-10/net/mac80211/rx.c
===================================================================
--- compat-wireless-2016-01-10.orig/net/mac80211/rx.c	2018-03-19 13:56:06.410771388 +0800
+++ compat-wireless-2016-01-10/net/mac80211/rx.c	2018-03-19 14:50:46.438868093 +0800
@@ -2898,6 +2898,53 @@
 	return RX_QUEUED;
 }
 
+/* austin: add this func to printk the info about auth/deauth,
+ * assoc/reassoc/disassoc. */
+static void ieee80211_rx_mgmt_info(struct ieee80211_sub_if_data *sdata,
+		const u8 *buf)
+{
+	struct ieee80211_mgmt *mgmt = (void *)buf;
+	u16 fc;
+	fc = le16_to_cpu(mgmt->frame_control);
+
+	switch (fc & IEEE80211_FCTL_STYPE) {
+	case IEEE80211_STYPE_AUTH:
+		sdata_dbg(sdata, "receive a AUTH frame from %pM\n", mgmt->sa);
+		break;
+	case IEEE80211_STYPE_DEAUTH:
+		sdata_info(sdata,
+				"receive a DEAUTH frame from %pM, Reason: %u\n",
+				mgmt->sa,
+				le16_to_cpu(mgmt->u.deauth.reason_code));
+		break;
+	case IEEE80211_STYPE_DISASSOC:
+		sdata_info(sdata, "receive a DISASSOC frame from %pM, Reason: "
+				  "%u\n",
+				mgmt->sa,
+				le16_to_cpu(mgmt->u.deauth.reason_code));
+		break;
+	case IEEE80211_STYPE_ASSOC_REQ:
+		sdata_dbg(sdata, "receive a ASSOC_REQ frame from %pM\n",
+				mgmt->sa);
+		break;
+	case IEEE80211_STYPE_REASSOC_REQ:
+		sdata_dbg(sdata, "receive a REASSOC_REQ frame from %pM\n",
+				mgmt->sa);
+		break;
+	case IEEE80211_STYPE_ASSOC_RESP:
+		sdata_dbg(sdata, "receive a ASSOC_RESP frame from %pM\n",
+				mgmt->sa);
+		break;
+	case IEEE80211_STYPE_REASSOC_RESP:
+		sdata_dbg(sdata, "receive a REASSOC_RESP frame from %pM\n",
+				mgmt->sa);
+		break;
+	default:
+		break;
+	}
+	return;
+}
+
 static ieee80211_rx_result debug_noinline
 ieee80211_rx_h_userspace_mgmt(struct ieee80211_rx_data *rx)
 {
@@ -2920,6 +2967,7 @@
 
 	if (cfg80211_rx_mgmt(&rx->sdata->wdev, status->freq, sig,
 			     rx->skb->data, rx->skb->len, 0)) {
+		ieee80211_rx_mgmt_info(rx->sdata, rx->skb->data);
 		if (rx->sta)
 			rx->sta->rx_stats.packets++;
 		dev_kfree_skb(rx->skb);
